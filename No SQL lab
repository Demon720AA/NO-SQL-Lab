 //2.1
MATCH(m:Movie{released:2019})
RETURN m

//2.2
MATCH(m:Movie{released:2020})
RETURN m

//2.3
MATCH(m:Movie{released:2003})
RETURN m.title

//2.4
MATCH(m:Movie)
RETURN m.title, m.released, m.tagline

//2.5
MATCH(m:Movie)
RETURN m.title AS `movie title`, m.released AS `released year`, m.tagline AS `tagLine`

//3.1
MATCH(p:Person)-[rel:WROTE]->(m:Movie{title:'Top Gun'})
RETURN p.name

//3.2
MATCH(p:Person{name:'Tom Hanks'})-[rel]-(m:Movie)
RETURN m.title

//3.3
MATCH(p:Person{name:'Tom Hanks'})-[rel]->(m:Movie)
RETURN m.title, type(rel)  

//3.4
MATCH(p:Person{name:'Tom Hanks'})-[rel:ACTED_IN]->(m:Movie)
RETURN m.title, rel.roles

//4.1
MATCH(p:Person)-[rel:ACTED_IN]->(m:Movie)
WHERE p.name = 'Tom Cruise'
RETURN m.title

//4.2
MATCH(p:Person)
WHERE p.born >= 1970 and p.born <=1979
RETURN p.name, p.born

//4.3
MATCH (p:Person)-[rel:ACTED_IN]->(m:Movie)
WHERE p.born > 1960 AND m.title = 'The Matrix'
RETURN p.name, p.born

//4.4
MATCH (p:Person)
WHERE p.born is null
RETURN p.name

//4.5
MATCH (p:Person)-[rel]->(m:Movie)
WHERE rel.rating is not null
RETURN p.name, m.title, rel.rating

//4.6
MATCH (p:Person)-[rel:REVIEWED]->(m:Movie)
WHERE rel.summary CONTAINS 'fun'
RETURN m.title, rel.summary, rel.rating

//4.7
MATCH (a:Person)-[act:ACTED_IN]->(m:Movie)<-[dir:DIRECTED]-(d:Person)
MATCH (oa:Person)-[:ACTED_IN]->(m)
WHERE a.name IN d.name AND oa.name <> d.name
RETURN oa.name, d.name, m.title

//4.8
MATCH (p:Person)-[act:ACTED_IN]->(m:Movie)
WHERE m.title in act.roles
RETURN m.title, p.name

//ex5.1
MATCH (gene:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(co:Person),(director:Person)-[:DIRECTED]->(m)
WHERE gene.name='Gene Hackman'
RETURN m.title AS `movie`, director.name AS `director`, co.name AS `co-actors`

//ex5.2
MATCH (jame:Person)-[:FOLLOWS]-(p:Person)
WHERE jame.name='James Thompson'
RETURN jame, p

//ex5.3
MATCH (jame:Person)-[:FOLLOWS*3]-(p:Person)
WHERE jame.name='James Thompson'
RETURN jame, p

//ex5.4
MATCH (jame:Person)-[:FOLLOWS*1..2]-(p:Person)
WHERE jame.name='James Thompson'
RETURN jame, p

//ex5.5
MATCH (jame:Person)-[:FOLLOWS*]-(p:Person)
WHERE jame.name='James Thompson'
RETURN jame, p

//ex5.6
MATCH (p:Person)
WHERE p.name STARTS  WITH 'Tom'
OPTIONAL MATCH (p)-[:DIRECTED]->(m:Movie)
RETURN p.name, m.title

//ex6.1
MATCH (p:Person)-[:ACTED_IN]->(m:Movie)
RETURN p.name AS `actor`, collect(m.title) AS `movie list`

//ex6.2
MATCH (tom:Person)-[:ACTED_IN]->(m:Movie)<-[:ACTED_IN]-(p:Person)
WHERE p.name='Tom Cruise'
RETURN m.title AS `movie`, collect(tom.name) AS `co-actors`

//ex6.3
MATCH (p:Person)-[:REVIEWED]->(m:Movie)
RETURN m.title AS `movie`,count(p) AS `Number of reviews` ,collect(p.name) AS `reviewers list`

//ex6.4
MATCH (director:Person)-[:DIRECTED]->(m:Movie)<-[:ACTED_IN]-(actor:Person)
RETURN director.name AS `director`, COUNT(actor) AS `number of actor`, COLLECT(actor.name) AS `collab actors`

//ex6.5
MATCH (tom:Person)-[:ACTED_IN]->(m:Movie)
WHERE tom.name= 'Tom Hanks'
RETURN m{.title,.released} AS `Tom Hanks' movie`

//ex6.6
MATCH (tom:Person)-[:ACTED_IN]->(m:Movie)
WHERE tom.name='Tom Hanks'
RETURN m.title, m.released, datetime({epochmillis:timestamp()}).year-m.released AS `movieAge`, m.released-tom.born AS `Tom's Age`

//ex7.1
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH d, COUNT(m) AS movieCount
RETURN d.name AS Director, movieCount AS NumberOfMovies

//ex7.2
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH m, COUNT(d) AS directorCount
WHERE directorCount > 1
RETURN m.title AS MovieTitle, directorCount AS NumberOfDirectors

//ex7.3
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WITH a, COLLECT(m.title) AS movies, COUNT(m) AS movieCount
WHERE movieCount = 5
RETURN a.name AS ActorName, movies AS MoviesList

//ex7.4
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)
WITH a, COLLECT(m.title) AS movies, COUNT(m) AS movieCount
WHERE movieCount <= 3
RETURN a.name AS ActorName, movies AS MoviesList

//ex7.5
MATCH (a:Person)-[rel:ACTED_IN]->(m:Movie)
WITH a, m, rel, SIZE(rel.roles) AS roles
WHERE roles>1
RETURN a.name, m.title, rel.roles

//ex7.6
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)<-[:DIRECTED]-(d:Person)
WITH a, d, COLLECT(m.title) AS movies
WHERE SIZE(movies) >= 2
RETURN a.name AS ActorName, d.name AS DirectorName, movies AS MovieTitles

//ex7.7
MATCH (a:Person)-[:ACTED_IN]->(m:Movie)<-[:REVIEWED]-(r:Person)
WITH m, 
     COLLECT(DISTINCT a.name) AS ActorNames, 
     COLLECT(DISTINCT r.name) AS ReviewerNames
RETURN m.title, ActorNames, ReviewerNames

//ex7.8
MATCH (d:Person)-[:DIRECTED]->(m:Movie), (a:Person)-[:ACTED_IN]->(m), (m)<-[rel:REVIEWED]-(:Person)
WITH m, 
     COLLECT(DISTINCT d.name) AS Directors, 
     COLLECT(DISTINCT a.name) AS Actors,
     rel
WHERE rel.rating > 80
RETURN m.title, 
       Directors, 
       Actors

//ex7.9
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH m, COUNT(d) AS directorCount
WHERE directorCount >= 2
OPTIONAL MATCH (a:Person)-[:ACTED_IN]->(m)
OPTIONAL MATCH (r:Person)-[rel:REVIEWED]->(m)
WITH r, m.title AS MovieTitle,
     directorCount AS NumberOfDirectors,
     COUNT(DISTINCT a) AS NumberOfActors
RETURN MovieTitle, 
       NumberOfDirectors,  
       r.name

//ex7.10
MATCH (d:Person)-[:DIRECTED]->(m:Movie)
WITH m, COUNT(d) AS directorCount
WHERE directorCount >= 2
OPTIONAL MATCH (a:Person)-[:ACTED_IN]->(m)
OPTIONAL MATCH (r:Person)-[rel:REVIEWED]->(m)
WITH r, m.title AS MovieTitle,
     directorCount AS NumberOfDirectors,
     COUNT(DISTINCT a) AS NumberOfActors
RETURN MovieTitle, 
       NumberOfDirectors, 
       NumberOfActors,
       r.name

//8.1
MATCH (m:Movie)<-[:ACTED_IN]-(a:Person)
WHERE m.released >= 1990 AND m.released < 2000
WITH m.released AS ReleaseDate, 
     m.title AS MovieTitle, 
     COLLECT(DISTINCT a.name) AS ActorNames
RETURN ReleaseDate, 
       MovieTitle, 
       ActorNames

//8.2
MATCH (a:Person) -[:ACTED_IN]- (m:Movie)
where m.released>= 1990 and m.released <= 1999
return m.released, collect(m.title), collect(a.name)

//8.3
MATCH (a:Person) -[:ACTED_IN]- (m:Movie)
where m.released>= 1990 and m.released <= 1999
return m.released, collect(distinct m.title), collect(a.name)

//8.4
MATCH (a:Person) -[:ACTED_IN]- (m:Movie)
where m.released>= 1990 and m.released <= 1999
return m.released, collect(distinct m.title), collect(a.name) order by m.released DESC

//8.5
MATCH (m:Movie)<-[rev:REVIEWED]-(p:Person)
RETURN m.title, rev.rating ORDER BY rev.rating DESC LIMIT 5

//8.6
MATCH (m:Movie)<-[rev:REVIEWED]-(p:Person)
RETURN m.title, avg(rev.rating) ORDER BY avg(rev.rating) DESC LIMIT 5

//9.1
CREATE (m:Movie {title: 'Forrest Gump'})
RETURN m.title AS MovieTitle;

//9.10
MATCH (m:Movie {title: 'Forrest Gump'})
REMOVE m.lengthInMinutes
RETURN m;

//9.2
CREATE (p:Person {name: 'Robin Wright'})
RETURN p.name;

//9.3
MATCH (m:Movie)
WHERE m.released < 2010
SET m:OlderMovie
RETURN DISTINCT labels(m) AS Labels;

//9.4
MATCH (m:OlderMovie)
RETURN m.title AS MovieTitle, m.released AS ReleaseYear
ORDER BY ReleaseYear ASC;

//9.5
MATCH (p:Person)
WHERE p.name STARTS WITH 'Robin'
SET p:Female
RETURN p.name AS Name;

//9.6
MATCH (p:Female)
RETURN p.name AS Name;

//9.7
MATCH (p:Female)
REMOVE p:Female
RETURN p.name AS Name;

//9.7.5
CALL db.schema.visualization

//9.8
CREATE (m:Movie {title: 'Forrest Gump', released: 1994, tagline: 'Life is like a box of chocolates… you never know what you’re gonna get.', lengthInMinutes: 142})
SET m:OlderMovie
RETURN m;

//10.1
MATCH (p:Person), (m:Movie)
WHERE (p.name = 'Robin Wright' or p.name = 'Tom Hanks' or p.name = 'Gary Sinise') and m.title = 'Forrest Gump'
MERGE (p)-[:ACTED_IN]->(m)
RETURN p, m

//10.2
match (p:Person), (m:Movie)
where p.name = "Robert Zemeckis" and m.title = "Forrest Gump"
merge (p) -[:DIRECTED]-> (m)
return p, m

//10.3
match (p:Person), (f:Person)
where p.name = "Tom Hanks" and f.name = "Gary Sinise"
merge (p) -[:HELPED]-> (f)
return p, f

//10.4
match (p:Person) -[rel]- (m:Movie)
where m.title = "Forrest Gump"
return p, rel, m

//10.5
match (p:Person) -[rel:HELPED]- (f:Person)
set rel.research = "war history"
return p, rel, f

//10.5.5
CALL db.schema.visualization()

//10.6
match (p:Person) -[rel:ACTED_IN]-> (m:Movie {title: "Forrest Gump"})
with p, rel, m,
case p.name
    when "Tom Hanks" then "Forrest Gump"
    when "Robin Wright" then "Jenny Curran"
    when "Gary Sinise" then "Lieutenant Dan Taylor"
end as role_play
set rel.roles = role_play
return p, rel, m

//10.7
match (p:Person) -[rel:ACTED_IN]-> (m:Movie {title: "Forrest Gump"})
return p.name, rel.roles

//10.8
match (p:Person) -[rel:ACTED_IN]-> (m:Movie {title: "Forrest Gump"})
where p.name = "Gary Sinise"
set rel.roles = "Lt. Dan Taylor"
return p.name, rel.roles

//10.9.5
match (p:Person) -[rel:HELPED]- (f:Person)
return rel.research
